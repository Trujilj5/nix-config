return {
	{
		"neovim/nvim-lspconfig",
		lazy = false,
		config = function()
			local lspconfig = require("lspconfig")
			
			-- Lua LSP
			lspconfig.lua_ls.setup({
				settings = {
					Lua = {
						runtime = {
							version = "LuaJIT",
						},
						diagnostics = {
							globals = { "vim" },
						},
						workspace = {
							library = vim.api.nvim_get_runtime_file("", true),
							checkThirdParty = false,
						},
						telemetry = {
							enable = false,
						},
					},
				},
			})

			-- TypeScript/JavaScript LSP
			lspconfig.ts_ls.setup({
				root_dir = lspconfig.util.root_pattern("package.json", "tsconfig.json", "jsconfig.json", ".git")
					or vim.fn.getcwd(),
				single_file_support = true,
			})

			-- Nix LSP
			lspconfig.nil_ls.setup({})
			
			-- Alternative Nix LSP (nixd) - uncomment if you prefer it over nil_ls
			-- lspconfig.nixd.setup({})

			-- Java LSP (using system jdt-language-server)
			lspconfig.jdtls.setup({
				cmd = { "jdt-language-server", "-data", vim.fn.expand("~/.cache/jdtls") },
				root_dir = lspconfig.util.root_pattern("pom.xml", "build.gradle", ".git") or vim.fn.getcwd(),
				settings = {
					java = {
						configuration = {
							runtimes = {
								{
									name = "JavaSE-17",
									path = "/nix/store/*-openjdk-17*/", -- Nix manages Java
								},
							},
						},
					},
				},
			})

			-- YAML LSP
			lspconfig.yamlls.setup({
				settings = {
					yaml = {
						schemas = {
							["https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json"] = ".gitlab-ci.yml",
							["https://json.schemastore.org/github-workflow.json"] = "/.github/workflows/*",
						},
					},
				},
			})

			-- Bash LSP
			lspconfig.bashls.setup({})

			-- Python LSP
			lspconfig.pylsp.setup({
				settings = {
					pylsp = {
						plugins = {
							pycodestyle = {
								ignore = {'W391'},
								maxLineLength = 100
							}
						}
					}
				}
			})

			-- Rust LSP
			lspconfig.rust_analyzer.setup({
				settings = {
					["rust-analyzer"] = {
						cargo = {
							allFeatures = true,
						},
					},
				},
			})
		end,
	},
}